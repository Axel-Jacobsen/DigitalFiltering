ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"filter.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__aeabi_i2d
  21              		.global	__aeabi_ddiv
  22              		.global	__aeabi_d2uiz
  23              		.global	__aeabi_ui2d
  24              		.global	__aeabi_dmul
  25              		.global	__aeabi_dadd
  26              		.global	__aeabi_dsub
  27              		.section	.text.goertzel,"ax",%progbits
  28              		.align	2
  29              		.global	goertzel
  30              		.thumb
  31              		.thumb_func
  33              	goertzel:
  34              	.LFB0:
  35              		.file 1 "Src/filter.c"
   1:Src/filter.c  **** #include "assert.h"
   2:Src/filter.c  **** #include "stdio.h"
   3:Src/filter.c  **** #include "stdlib.h"
   4:Src/filter.c  **** #include "math.h"
   5:Src/filter.c  **** 
   6:Src/filter.c  **** #include "filter.h"
   7:Src/filter.c  **** #include "circular_buffer.h"
   8:Src/filter.c  **** 
   9:Src/filter.c  **** #define PI 3.141592653589793
  10:Src/filter.c  **** 
  11:Src/filter.c  **** #define BANDWITH 200
  12:Src/filter.c  **** #define NUM_FREQS 2
  13:Src/filter.c  **** 
  14:Src/filter.c  **** /*
  15:Src/filter.c  **** return the goertzel algorithm evaluation for the given inputs
  16:Src/filter.c  **** - x is an array of samples
  17:Src/filter.c  **** - sample_rate is the sample rate at which x was taken
  18:Src/filter.c  **** - freqs is an array of pairs of lower and upper bounds for frequencies
  19:Src/filter.c  ****     - example: freqs = [400, 500, 1000, 1100] would mean that we are looking at 2 bands of frequenc
  20:Src/filter.c  ****     - by it's nature, freqs must have an even number of inputs
  21:Src/filter.c  ****     - BANDWITHS MUST BE THE SAME FOR EACH FREQ PAIR
  22:Src/filter.c  ****         - TODO: Generalize for variable bandwiths
  23:Src/filter.c  **** - results must be 'results[num_freqs / 2][size_of_bin]'
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 2


  24:Src/filter.c  **** 
  25:Src/filter.c  **** TODO:
  26:Src/filter.c  ****     - optimize w/ pointers
  27:Src/filter.c  ****     - optimize for use in other files
  28:Src/filter.c  **** */
  29:Src/filter.c  **** 
  30:Src/filter.c  **** double goertzel(int *x, int sample_rate, int freq, int window_size)
  31:Src/filter.c  **** {
  36              		.loc 1 31 0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 16
  39              		@ frame_needed = 0, uses_anonymous_args = 0
  40              	.LVL0:
  41 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 32
  44              		.cfi_offset 4, -32
  45              		.cfi_offset 5, -28
  46              		.cfi_offset 6, -24
  47              		.cfi_offset 7, -20
  48              		.cfi_offset 8, -16
  49              		.cfi_offset 9, -12
  50              		.cfi_offset 10, -8
  51              		.cfi_offset 14, -4
  52 0004 84B0     		sub	sp, sp, #16
  53              	.LCFI1:
  54              		.cfi_def_cfa_offset 48
  55 0006 8246     		mov	r10, r0
  56 0008 9046     		mov	r8, r2
  57 000a 9946     		mov	r9, r3
  32:Src/filter.c  ****     // Set up initial parameters
  33:Src/filter.c  ****     double f_step = sample_rate / (double)window_size;
  58              		.loc 1 33 0
  59 000c 0846     		mov	r0, r1
  60              	.LVL1:
  61 000e FFF7FEFF 		bl	__aeabi_i2d
  62              	.LVL2:
  63 0012 0446     		mov	r4, r0
  64 0014 0D46     		mov	r5, r1
  65 0016 4846     		mov	r0, r9
  66 0018 FFF7FEFF 		bl	__aeabi_i2d
  67              	.LVL3:
  68 001c 0646     		mov	r6, r0
  69 001e 0F46     		mov	r7, r1
  70 0020 2046     		mov	r0, r4
  71 0022 2946     		mov	r1, r5
  72 0024 3246     		mov	r2, r6
  73 0026 3B46     		mov	r3, r7
  74 0028 FFF7FEFF 		bl	__aeabi_ddiv
  75              	.LVL4:
  76 002c 0446     		mov	r4, r0
  77 002e 0D46     		mov	r5, r1
  78              	.LVL5:
  34:Src/filter.c  ****     double f_step_normalized = 1.0 / window_size;
  79              		.loc 1 34 0
  80 0030 0020     		movs	r0, #0
  81 0032 4149     		ldr	r1, .L5+8
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 3


  82 0034 3246     		mov	r2, r6
  83 0036 3B46     		mov	r3, r7
  84 0038 FFF7FEFF 		bl	__aeabi_ddiv
  85              	.LVL6:
  86 003c 0646     		mov	r6, r0
  87 003e 0F46     		mov	r7, r1
  88              	.LVL7:
  35:Src/filter.c  **** 
  36:Src/filter.c  ****     uint32_t k = (uint32_t)floor(freq / f_step);
  89              		.loc 1 36 0
  90 0040 4046     		mov	r0, r8
  91 0042 FFF7FEFF 		bl	__aeabi_i2d
  92              	.LVL8:
  93 0046 2246     		mov	r2, r4
  94 0048 2B46     		mov	r3, r5
  95 004a FFF7FEFF 		bl	__aeabi_ddiv
  96              	.LVL9:
  97 004e 41EC100B 		fmdrr	d0, r0, r1
  98 0052 FFF7FEFF 		bl	floor
  99              	.LVL10:
 100 0056 51EC100B 		fmrrd	r0, r1, d0
 101 005a FFF7FEFF 		bl	__aeabi_d2uiz
 102              	.LVL11:
  37:Src/filter.c  **** 
  38:Src/filter.c  ****     // number of frequencies is the same size as the number of
  39:Src/filter.c  ****     // upper and lower bin limits; loop through bin limits (i.e.
  40:Src/filter.c  ****     // k_start and k_end pairs, and evaluate goertzel from there)
  41:Src/filter.c  ****     double normalizedfreq, w_real;
  42:Src/filter.c  **** 
  43:Src/filter.c  ****     normalizedfreq = k * f_step_normalized;
 103              		.loc 1 43 0
 104 005e FFF7FEFF 		bl	__aeabi_ui2d
 105              	.LVL12:
 106 0062 3246     		mov	r2, r6
 107 0064 3B46     		mov	r3, r7
 108 0066 FFF7FEFF 		bl	__aeabi_dmul
 109              	.LVL13:
  44:Src/filter.c  ****     w_real = 2.0 * cos(2.0 * PI * normalizedfreq);
 110              		.loc 1 44 0
 111 006a 31A3     		adr	r3, .L5
 112 006c D3E90023 		ldrd	r2, [r3]
 113 0070 FFF7FEFF 		bl	__aeabi_dmul
 114              	.LVL14:
 115 0074 41EC100B 		fmdrr	d0, r0, r1
 116 0078 FFF7FEFF 		bl	cos
 117              	.LVL15:
 118 007c 53EC102B 		fmrrd	r2, r3, d0
 119 0080 10EE100A 		fmrs	r0, s0	@ int
 120 0084 1946     		mov	r1, r3
 121 0086 FFF7FEFF 		bl	__aeabi_dadd
 122              	.LVL16:
 123 008a CDE90201 		strd	r0, [sp, #8]
 124              	.LVL17:
  45:Src/filter.c  ****     double d1 = 0, d2 = 0, y = 0, tot_power = 0;
 125              		.loc 1 45 0
 126 008e 0026     		movs	r6, #0
 127              	.LVL18:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 4


 128 0090 0027     		movs	r7, #0
 129 0092 3446     		mov	r4, r6
 130              	.LVL19:
 131 0094 3D46     		mov	r5, r7
  46:Src/filter.c  ****     int n = 0;
  47:Src/filter.c  ****     while (n < window_size)
 132              		.loc 1 47 0
 133 0096 18E0     		b	.L2
 134              	.LVL20:
 135              	.L3:
  48:Src/filter.c  ****     {
  49:Src/filter.c  ****         y = x[n] + w_real * d1 - d2;
 136              		.loc 1 49 0
 137 0098 DAF80080 		ldr	r8, [r10]
 138 009c DDE90201 		ldrd	r0, [sp, #8]
 139 00a0 2246     		mov	r2, r4
 140 00a2 2B46     		mov	r3, r5
 141 00a4 FFF7FEFF 		bl	__aeabi_dmul
 142              	.LVL21:
 143 00a8 CDE90001 		strd	r0, [sp]
 144 00ac 4046     		mov	r0, r8
 145 00ae FFF7FEFF 		bl	__aeabi_i2d
 146              	.LVL22:
 147 00b2 DDE90023 		ldrd	r2, [sp]
 148 00b6 FFF7FEFF 		bl	__aeabi_dadd
 149              	.LVL23:
 150 00ba 3246     		mov	r2, r6
 151 00bc 3B46     		mov	r3, r7
 152 00be FFF7FEFF 		bl	__aeabi_dsub
 153              	.LVL24:
  50:Src/filter.c  ****         d2 = d1;
 154              		.loc 1 50 0
 155 00c2 2646     		mov	r6, r4
 156 00c4 2F46     		mov	r7, r5
  51:Src/filter.c  ****         d1 = y;
 157              		.loc 1 51 0
 158 00c6 0446     		mov	r4, r0
 159              	.LVL25:
 160 00c8 0D46     		mov	r5, r1
 161              	.LVL26:
 162              	.L2:
  47:Src/filter.c  ****     {
 163              		.loc 1 47 0
 164 00ca B9F1000F 		cmp	r9, #0
 165 00ce E3DC     		bgt	.L3
  52:Src/filter.c  ****     }
  53:Src/filter.c  **** 
  54:Src/filter.c  ****     // Calculate power, and put it in its results spot
  55:Src/filter.c  ****     return d2 * d2 + d1 * d1 - w_real * d1 * d2 / tot_power;
 166              		.loc 1 55 0
 167 00d0 3046     		mov	r0, r6
 168 00d2 3946     		mov	r1, r7
 169 00d4 3246     		mov	r2, r6
 170 00d6 3B46     		mov	r3, r7
 171 00d8 FFF7FEFF 		bl	__aeabi_dmul
 172              	.LVL27:
 173 00dc 8046     		mov	r8, r0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 5


 174 00de 8946     		mov	r9, r1
 175              	.LVL28:
 176 00e0 2046     		mov	r0, r4
 177 00e2 2946     		mov	r1, r5
 178 00e4 2246     		mov	r2, r4
 179 00e6 2B46     		mov	r3, r5
 180 00e8 FFF7FEFF 		bl	__aeabi_dmul
 181              	.LVL29:
 182 00ec 0246     		mov	r2, r0
 183 00ee 0B46     		mov	r3, r1
 184 00f0 4046     		mov	r0, r8
 185 00f2 4946     		mov	r1, r9
 186 00f4 FFF7FEFF 		bl	__aeabi_dadd
 187              	.LVL30:
 188 00f8 8046     		mov	r8, r0
 189 00fa 8946     		mov	r9, r1
 190 00fc DDE90201 		ldrd	r0, [sp, #8]
 191 0100 2246     		mov	r2, r4
 192 0102 2B46     		mov	r3, r5
 193 0104 FFF7FEFF 		bl	__aeabi_dmul
 194              	.LVL31:
 195 0108 3246     		mov	r2, r6
 196 010a 3B46     		mov	r3, r7
 197 010c FFF7FEFF 		bl	__aeabi_dmul
 198              	.LVL32:
 199 0110 0022     		movs	r2, #0
 200 0112 0023     		movs	r3, #0
 201 0114 FFF7FEFF 		bl	__aeabi_ddiv
 202              	.LVL33:
 203 0118 0246     		mov	r2, r0
 204 011a 0B46     		mov	r3, r1
 205 011c 4046     		mov	r0, r8
 206 011e 4946     		mov	r1, r9
 207 0120 FFF7FEFF 		bl	__aeabi_dsub
 208              	.LVL34:
  56:Src/filter.c  **** }
 209              		.loc 1 56 0
 210 0124 41EC100B 		fmdrr	d0, r0, r1
 211 0128 04B0     		add	sp, sp, #16
 212              	.LCFI2:
 213              		.cfi_def_cfa_offset 32
 214              		@ sp needed
 215 012a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 216              	.LVL35:
 217              	.L6:
 218 012e 00BF     		.align	3
 219              	.L5:
 220 0130 182D4454 		.word	1413754136
 221 0134 FB211940 		.word	1075388923
 222 0138 0000F03F 		.word	1072693248
 223              		.cfi_endproc
 224              	.LFE0:
 226              		.section	.text.circular_goertzel_stream,"ax",%progbits
 227              		.align	2
 228              		.global	circular_goertzel_stream
 229              		.thumb
 230              		.thumb_func
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 6


 232              	circular_goertzel_stream:
 233              	.LFB1:
  57:Src/filter.c  **** 
  58:Src/filter.c  **** double circular_goertzel_stream(double x, int freq, int sample_rate, int window_size)
  59:Src/filter.c  **** {
 234              		.loc 1 59 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL36:
 239 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 240              	.LCFI3:
 241              		.cfi_def_cfa_offset 40
 242              		.cfi_offset 3, -40
 243              		.cfi_offset 4, -36
 244              		.cfi_offset 5, -32
 245              		.cfi_offset 6, -28
 246              		.cfi_offset 7, -24
 247              		.cfi_offset 8, -20
 248              		.cfi_offset 9, -16
 249              		.cfi_offset 10, -12
 250              		.cfi_offset 11, -8
 251              		.cfi_offset 14, -4
 252 0004 5BEC10AB 		fmrrd	r10, fp, d0
 253 0008 8046     		mov	r8, r0
 254 000a 1446     		mov	r4, r2
  60:Src/filter.c  ****     // // Set up and initialize circular_buffer
  61:Src/filter.c  ****     // static int initialized = 0;
  62:Src/filter.c  ****     // static circ_bufsum_t cbuf;
  63:Src/filter.c  ****     // if (!initialized)
  64:Src/filter.c  ****     // {
  65:Src/filter.c  ****     //     circ_bufsum_init(&cbuf, window_size);
  66:Src/filter.c  ****     //     initialized = 1;
  67:Src/filter.c  ****     // }
  68:Src/filter.c  **** 
  69:Src/filter.c  ****     // Set up initial parameters
  70:Src/filter.c  ****     double f_step = sample_rate / (double)window_size;
 255              		.loc 1 70 0
 256 000c 0846     		mov	r0, r1
 257              	.LVL37:
 258 000e FFF7FEFF 		bl	__aeabi_i2d
 259              	.LVL38:
 260 0012 0646     		mov	r6, r0
 261 0014 0F46     		mov	r7, r1
 262 0016 2046     		mov	r0, r4
 263 0018 FFF7FEFF 		bl	__aeabi_i2d
 264              	.LVL39:
 265 001c 0446     		mov	r4, r0
 266              	.LVL40:
 267 001e 0D46     		mov	r5, r1
 268 0020 3046     		mov	r0, r6
 269 0022 3946     		mov	r1, r7
 270 0024 2246     		mov	r2, r4
 271 0026 2B46     		mov	r3, r5
 272 0028 FFF7FEFF 		bl	__aeabi_ddiv
 273              	.LVL41:
 274 002c 0646     		mov	r6, r0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 7


 275 002e 0F46     		mov	r7, r1
 276              	.LVL42:
  71:Src/filter.c  ****     double f_step_normalized = 1.0 / window_size;
 277              		.loc 1 71 0
 278 0030 0020     		movs	r0, #0
 279 0032 3749     		ldr	r1, .L9+8
 280 0034 2246     		mov	r2, r4
 281 0036 2B46     		mov	r3, r5
 282 0038 FFF7FEFF 		bl	__aeabi_ddiv
 283              	.LVL43:
 284 003c 0446     		mov	r4, r0
 285 003e 0D46     		mov	r5, r1
 286              	.LVL44:
  72:Src/filter.c  **** 
  73:Src/filter.c  ****     // Calculate freq bin (for calc of frequency)
  74:Src/filter.c  ****     double k = freq / f_step;
 287              		.loc 1 74 0
 288 0040 4046     		mov	r0, r8
 289 0042 FFF7FEFF 		bl	__aeabi_i2d
 290              	.LVL45:
 291 0046 3246     		mov	r2, r6
 292 0048 3B46     		mov	r3, r7
 293 004a FFF7FEFF 		bl	__aeabi_ddiv
 294              	.LVL46:
  75:Src/filter.c  **** 
  76:Src/filter.c  ****     // Get rid of for loop of num_freqs,etc
  77:Src/filter.c  ****     // Bin frequency and coefficients for computation
  78:Src/filter.c  ****     // TODO: MAKE STATIC? i.e. w_real is constant across t
  79:Src/filter.c  ****     //       for one frequency!
  80:Src/filter.c  ****     double normalizedfreq, w_real;
  81:Src/filter.c  ****     normalizedfreq = k * f_step_normalized;
 295              		.loc 1 81 0
 296 004e 2246     		mov	r2, r4
 297 0050 2B46     		mov	r3, r5
 298 0052 FFF7FEFF 		bl	__aeabi_dmul
 299              	.LVL47:
  82:Src/filter.c  ****     w_real = 2.0 * cos(2.0 * PI * normalizedfreq);
 300              		.loc 1 82 0
 301 0056 2CA3     		adr	r3, .L9
 302 0058 D3E90023 		ldrd	r2, [r3]
 303 005c FFF7FEFF 		bl	__aeabi_dmul
 304              	.LVL48:
 305 0060 41EC100B 		fmdrr	d0, r0, r1
 306 0064 FFF7FEFF 		bl	cos
 307              	.LVL49:
 308 0068 53EC102B 		fmrrd	r2, r3, d0
 309 006c 10EE100A 		fmrs	r0, s0	@ int
 310 0070 1946     		mov	r1, r3
 311 0072 FFF7FEFF 		bl	__aeabi_dadd
 312              	.LVL50:
 313 0076 0646     		mov	r6, r0
 314              	.LVL51:
 315 0078 0F46     		mov	r7, r1
 316              	.LVL52:
  83:Src/filter.c  **** 
  84:Src/filter.c  ****     /*
  85:Src/filter.c  ****     ALGO:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 8


  86:Src/filter.c  ****         while cbuf->size < WINDOW_SIZE
  87:Src/filter.c  ****             perform this loop (put new values of y into cbuf)
  88:Src/filter.c  ****         put new values into cbuf, subtract old y from d1 values
  89:Src/filter.c  **** 
  90:Src/filter.c  ****     TODO: Optimize circ_bufsum_add_sample to be able to be used when queue is not empty
  91:Src/filter.c  ****     */
  92:Src/filter.c  ****     static double d1 = 0;
  93:Src/filter.c  ****     static double d2 = 0;
  94:Src/filter.c  ****     static double y = 0;
  95:Src/filter.c  ****     static double total_power = 0;
  96:Src/filter.c  ****     // Now the cbuf is full; add values, and subtract old y from d1
  97:Src/filter.c  ****     // double a = circ_bufsum_add_sample(&cbuf, y);
  98:Src/filter.c  ****     y = x + w_real * d1 - d2;
 317              		.loc 1 98 0
 318 007a 264C     		ldr	r4, .L9+12
 319              	.LVL53:
 320 007c D4E90089 		ldrd	r8, [r4]
 321              	.LVL54:
 322 0080 4246     		mov	r2, r8
 323 0082 4B46     		mov	r3, r9
 324 0084 FFF7FEFF 		bl	__aeabi_dmul
 325              	.LVL55:
 326 0088 5246     		mov	r2, r10
 327 008a 5B46     		mov	r3, fp
 328 008c FFF7FEFF 		bl	__aeabi_dadd
 329              	.LVL56:
 330 0090 214D     		ldr	r5, .L9+16
 331 0092 D5E90023 		ldrd	r2, [r5]
 332 0096 FFF7FEFF 		bl	__aeabi_dsub
 333              	.LVL57:
 334 009a 8246     		mov	r10, r0
 335              	.LVL58:
 336 009c 8B46     		mov	fp, r1
 337 009e 1F4B     		ldr	r3, .L9+20
 338 00a0 C3E900AB 		strd	r10, [r3]
  99:Src/filter.c  ****     d2 = d1;
 339              		.loc 1 99 0
 340 00a4 C5E90089 		strd	r8, [r5]
 100:Src/filter.c  ****     d1 = y;
 341              		.loc 1 100 0
 342 00a8 C4E900AB 		strd	r10, [r4]
 101:Src/filter.c  **** 
 102:Src/filter.c  ****     // printf("FRQ: %.9f", normalizedfreq * sample_rate);
 103:Src/filter.c  ****     // printf(" VAL: %.9f\n", d2 * d2 + d1 * d1 - w_real * d1 * d2);
 104:Src/filter.c  ****     // // Calculate power, and put it in its results spot
 105:Src/filter.c  ****     // MAY NEED TO NORMAILZE POWER
 106:Src/filter.c  ****     return log((d2 * d2 + d1 * d1 - w_real * d1 * d2));
 343              		.loc 1 106 0
 344 00ac 4046     		mov	r0, r8
 345 00ae 4946     		mov	r1, r9
 346 00b0 4246     		mov	r2, r8
 347 00b2 4B46     		mov	r3, r9
 348 00b4 FFF7FEFF 		bl	__aeabi_dmul
 349              	.LVL59:
 350 00b8 0446     		mov	r4, r0
 351 00ba 0D46     		mov	r5, r1
 352 00bc 5046     		mov	r0, r10
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 9


 353 00be 5946     		mov	r1, fp
 354 00c0 5246     		mov	r2, r10
 355 00c2 5B46     		mov	r3, fp
 356 00c4 FFF7FEFF 		bl	__aeabi_dmul
 357              	.LVL60:
 358 00c8 0246     		mov	r2, r0
 359 00ca 0B46     		mov	r3, r1
 360 00cc 2046     		mov	r0, r4
 361 00ce 2946     		mov	r1, r5
 362 00d0 FFF7FEFF 		bl	__aeabi_dadd
 363              	.LVL61:
 364 00d4 0446     		mov	r4, r0
 365 00d6 0D46     		mov	r5, r1
 366 00d8 3046     		mov	r0, r6
 367 00da 3946     		mov	r1, r7
 368 00dc 5246     		mov	r2, r10
 369 00de 5B46     		mov	r3, fp
 370 00e0 FFF7FEFF 		bl	__aeabi_dmul
 371              	.LVL62:
 372 00e4 0246     		mov	r2, r0
 373 00e6 0B46     		mov	r3, r1
 374 00e8 4046     		mov	r0, r8
 375 00ea 4946     		mov	r1, r9
 376 00ec FFF7FEFF 		bl	__aeabi_dmul
 377              	.LVL63:
 378 00f0 0246     		mov	r2, r0
 379 00f2 0B46     		mov	r3, r1
 380 00f4 2046     		mov	r0, r4
 381 00f6 2946     		mov	r1, r5
 382 00f8 FFF7FEFF 		bl	__aeabi_dsub
 383              	.LVL64:
 384 00fc 41EC100B 		fmdrr	d0, r0, r1
 385 0100 FFF7FEFF 		bl	log
 386              	.LVL65:
 107:Src/filter.c  **** }
 387              		.loc 1 107 0
 388 0104 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 389              	.LVL66:
 390              	.L10:
 391              		.align	3
 392              	.L9:
 393 0108 182D4454 		.word	1413754136
 394 010c FB211940 		.word	1075388923
 395 0110 0000F03F 		.word	1072693248
 396 0114 00000000 		.word	.LANCHOR0
 397 0118 00000000 		.word	.LANCHOR1
 398 011c 00000000 		.word	.LANCHOR2
 399              		.cfi_endproc
 400              	.LFE1:
 402              		.section	.text.tandem_goertzel_stream,"ax",%progbits
 403              		.align	2
 404              		.global	tandem_goertzel_stream
 405              		.thumb
 406              		.thumb_func
 408              	tandem_goertzel_stream:
 409              	.LFB2:
 108:Src/filter.c  ****     // double circular_goertzel_stream(double x, int freq, int sample_rate, int window_size)
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 10


 109:Src/filter.c  ****     // {
 110:Src/filter.c  ****     //     // Set up and initialize circular_buffer
 111:Src/filter.c  ****     //     // static int initialized = 0;
 112:Src/filter.c  ****     //     // static circ_bufsum_t cbuf;
 113:Src/filter.c  ****     //     // if (!initialized)
 114:Src/filter.c  ****     //     // {
 115:Src/filter.c  ****     //     //     circ_bufsum_init(&cbuf, window_size);
 116:Src/filter.c  ****     //     //     initialized = 1;
 117:Src/filter.c  ****     //     // }
 118:Src/filter.c  **** 
 119:Src/filter.c  ****     //     // Set up initial parameters
 120:Src/filter.c  ****     //     double f_step = sample_rate / (double)window_size;
 121:Src/filter.c  ****     //     double f_step_normalized = 1.0 / window_size;
 122:Src/filter.c  **** 
 123:Src/filter.c  ****     //     // Calculate freq bin (for calc of frequency)
 124:Src/filter.c  ****     //     uint32_t k = (uint32_t)floor(freq / f_step);
 125:Src/filter.c  **** 
 126:Src/filter.c  ****     //     // Get rid of for loop of num_freqs,etc
 127:Src/filter.c  ****     //     // Bin frequency and coefficients for computation
 128:Src/filter.c  ****     //     // TODO: MAKE STATIC? i.e. w_real is constant across t
 129:Src/filter.c  ****     //     //       for one frequency!
 130:Src/filter.c  ****     //     static double normalizedfreq, w_real;
 131:Src/filter.c  ****     //     normalizedfreq = k * f_step_normalized;
 132:Src/filter.c  ****     //     w_real = 2.0 * cos(2.0 * PI * normalizedfreq);
 133:Src/filter.c  **** 
 134:Src/filter.c  ****     //     /*
 135:Src/filter.c  ****     //     ALGO:
 136:Src/filter.c  ****     //         while cbuf->size < WINDOW_SIZE
 137:Src/filter.c  ****     //             perform this loop (put new values of y into cbuf)
 138:Src/filter.c  ****     //         put new values into cbuf, subtract old y from d1 values
 139:Src/filter.c  ****     //     */
 140:Src/filter.c  ****     //     static double d1, d2, y, total_power;
 141:Src/filter.c  ****     //     // Now the cbuf is full; add values, and subtract old y from d1
 142:Src/filter.c  ****     //     // double a = circ_bufsum_add_sample(&cbuf, y);
 143:Src/filter.c  ****     //     y = x + w_real * d1 - d2;
 144:Src/filter.c  ****     //     d2 = d1;
 145:Src/filter.c  ****     //     d1 = y;
 146:Src/filter.c  **** 
 147:Src/filter.c  ****     //     // printf("FRQ: %.9f", normalizedfreq * sample_rate);
 148:Src/filter.c  ****     //     // printf(" VAL: %.9f\n", d2 * d2 + d1 * d1 - w_real * d1 * d2);
 149:Src/filter.c  ****     //     // // Calculate power, and put it in its results spot
 150:Src/filter.c  ****     //     // MAY NEED TO NORMAILZE POWER
 151:Src/filter.c  ****     //     total_power += x * x;
 152:Src/filter.c  ****     //     return ((d2 * d2 + d1 * d1 - w_real * d1 * d2) / total_power);
 153:Src/filter.c  ****     // }
 154:Src/filter.c  **** 
 155:Src/filter.c  ****     /*
 156:Src/filter.c  **** Takes a stream of samples at sample_rate. returns current power every iteration
 157:Src/filter.c  **** sample_rate = 1024
 158:Src/filter.c  **** resetsample = 512
 159:Src/filter.c  **** 
 160:Src/filter.c  **** Adapted from https://netwerkt.wordpress.com/2011/08/25/goertzel-filter/
 161:Src/filter.c  **** */
 162:Src/filter.c  ****     double tandem_goertzel_stream(double x, int freq, int sample_rate, int resetsample)
 163:Src/filter.c  ****     {
 410              		.loc 1 163 0
 411              		.cfi_startproc
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 11


 412              		@ args = 0, pretend = 0, frame = 16
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              	.LVL67:
 415 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 416              	.LCFI4:
 417              		.cfi_def_cfa_offset 36
 418              		.cfi_offset 4, -36
 419              		.cfi_offset 5, -32
 420              		.cfi_offset 6, -28
 421              		.cfi_offset 7, -24
 422              		.cfi_offset 8, -20
 423              		.cfi_offset 9, -16
 424              		.cfi_offset 10, -12
 425              		.cfi_offset 11, -8
 426              		.cfi_offset 14, -4
 427 0004 85B0     		sub	sp, sp, #20
 428              	.LCFI5:
 429              		.cfi_def_cfa_offset 56
 430 0006 57EC106B 		fmrrd	r6, r7, d0
 431 000a 9046     		mov	r8, r2
 164:Src/filter.c  ****         static double s_prev[2] = {0.0, 0.0};
 165:Src/filter.c  ****         static double s_prev2[2] = {0.0, 0.0};
 166:Src/filter.c  ****         static double total_power[2] = {0.0, 0.0};
 167:Src/filter.c  ****         static int N = 0;
 168:Src/filter.c  ****         double w_real, normalizedfreq, power, s;
 169:Src/filter.c  ****         int active;
 170:Src/filter.c  ****         static int n[2] = {0, 0};
 171:Src/filter.c  **** 
 172:Src/filter.c  ****         normalizedfreq = freq / sample_rate;
 432              		.loc 1 172 0
 433 000c 90FBF1F0 		sdiv	r0, r0, r1
 434              	.LVL68:
 435 0010 FFF7FEFF 		bl	__aeabi_i2d
 436              	.LVL69:
 173:Src/filter.c  ****         w_real = 2.0 * cos(2.0 * PI * normalizedfreq);
 437              		.loc 1 173 0
 438 0014 6FA3     		adr	r3, .L14+28
 439 0016 D3E90023 		ldrd	r2, [r3]
 440 001a FFF7FEFF 		bl	__aeabi_dmul
 441              	.LVL70:
 442 001e 41EC100B 		fmdrr	d0, r0, r1
 443 0022 FFF7FEFF 		bl	cos
 444              	.LVL71:
 445 0026 53EC102B 		fmrrd	r2, r3, d0
 446 002a 10EE100A 		fmrs	r0, s0	@ int
 447 002e 1946     		mov	r1, r3
 448 0030 FFF7FEFF 		bl	__aeabi_dadd
 449              	.LVL72:
 450 0034 0246     		mov	r2, r0
 451 0036 0B46     		mov	r3, r1
 452 0038 CDE90023 		strd	r2, [sp]
 453              	.LVL73:
 174:Src/filter.c  **** 
 175:Src/filter.c  ****         // Calculate the first set of samples
 176:Src/filter.c  ****         s = x + w_real * s_prev[0] - s_prev2[0];
 454              		.loc 1 176 0
 455 003c 604C     		ldr	r4, .L14+8
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 12


 456 003e D4E900AB 		ldrd	r10, [r4]
 457 0042 5046     		mov	r0, r10
 458 0044 5946     		mov	r1, fp
 459 0046 FFF7FEFF 		bl	__aeabi_dmul
 460              	.LVL74:
 461 004a 3246     		mov	r2, r6
 462 004c 3B46     		mov	r3, r7
 463 004e FFF7FEFF 		bl	__aeabi_dadd
 464              	.LVL75:
 465 0052 DFF87C91 		ldr	r9, .L14+24
 466 0056 D9E90023 		ldrd	r2, [r9]
 467 005a FFF7FEFF 		bl	__aeabi_dsub
 468              	.LVL76:
 177:Src/filter.c  ****         s_prev2[0] = s_prev[0];
 469              		.loc 1 177 0
 470 005e C9E900AB 		strd	r10, [r9]
 178:Src/filter.c  ****         s_prev[0] = s;
 471              		.loc 1 178 0
 472 0062 C4E90001 		strd	r0, [r4]
 179:Src/filter.c  ****         n[0]++;
 473              		.loc 1 179 0
 474 0066 574D     		ldr	r5, .L14+12
 475 0068 2B68     		ldr	r3, [r5]
 476 006a 0133     		adds	r3, r3, #1
 477 006c 2B60     		str	r3, [r5]
 180:Src/filter.c  **** 
 181:Src/filter.c  ****         // Calculate the second set of samples
 182:Src/filter.c  ****         s = x + w_real * s_prev[1] - s_prev2[1];
 478              		.loc 1 182 0
 479 006e D4E902AB 		ldrd	r10, [r4, #8]
 480 0072 5046     		mov	r0, r10
 481              	.LVL77:
 482 0074 5946     		mov	r1, fp
 483 0076 DDE90023 		ldrd	r2, [sp]
 484 007a FFF7FEFF 		bl	__aeabi_dmul
 485              	.LVL78:
 486 007e 3246     		mov	r2, r6
 487 0080 3B46     		mov	r3, r7
 488 0082 FFF7FEFF 		bl	__aeabi_dadd
 489              	.LVL79:
 490 0086 D9E90223 		ldrd	r2, [r9, #8]
 491 008a FFF7FEFF 		bl	__aeabi_dsub
 492              	.LVL80:
 183:Src/filter.c  ****         s_prev2[1] = s_prev[1];
 493              		.loc 1 183 0
 494 008e C9E902AB 		strd	r10, [r9, #8]
 184:Src/filter.c  ****         s_prev[1] = s;
 495              		.loc 1 184 0
 496 0092 C4E90201 		strd	r0, [r4, #8]
 185:Src/filter.c  ****         n[1]++;
 497              		.loc 1 185 0
 498 0096 6B68     		ldr	r3, [r5, #4]
 499 0098 0133     		adds	r3, r3, #1
 500 009a 6B60     		str	r3, [r5, #4]
 186:Src/filter.c  **** 
 187:Src/filter.c  ****         N++;
 501              		.loc 1 187 0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 13


 502 009c 4A4B     		ldr	r3, .L14+16
 503 009e 1C68     		ldr	r4, [r3]
 504 00a0 0134     		adds	r4, r4, #1
 505 00a2 1C60     		str	r4, [r3]
 188:Src/filter.c  **** 
 189:Src/filter.c  ****         // reset inactive
 190:Src/filter.c  ****         active = (N / resetsample) & 0x01;
 506              		.loc 1 190 0
 507 00a4 94FBF8F4 		sdiv	r4, r4, r8
 508 00a8 04F00104 		and	r4, r4, #1
 509              	.LVL81:
 191:Src/filter.c  ****         if (n[1 - active] >= resetsample)
 510              		.loc 1 191 0
 511 00ac C4F10102 		rsb	r2, r4, #1
 512 00b0 55F82230 		ldr	r3, [r5, r2, lsl #2]
 513 00b4 4345     		cmp	r3, r8
 514 00b6 12DB     		blt	.L12
 192:Src/filter.c  ****         {
 193:Src/filter.c  ****             s_prev[1 - active] = 0.0;
 515              		.loc 1 193 0
 516 00b8 D300     		lsls	r3, r2, #3
 517 00ba 414D     		ldr	r5, .L14+8
 518 00bc 1D44     		add	r5, r5, r3
 519 00be 0020     		movs	r0, #0
 520              	.LVL82:
 521 00c0 0021     		movs	r1, #0
 522 00c2 C5E90001 		strd	r0, [r5]
 523              	.LVL83:
 194:Src/filter.c  ****             s_prev2[1 - active] = 0.0;
 524              		.loc 1 194 0
 525 00c6 4D46     		mov	r5, r9
 526 00c8 1D44     		add	r5, r5, r3
 527 00ca C5E90001 		strd	r0, [r5]
 195:Src/filter.c  ****             total_power[1 - active] = 0.0;
 528              		.loc 1 195 0
 529 00ce 3F4D     		ldr	r5, .L14+20
 530 00d0 2B44     		add	r3, r3, r5
 531 00d2 C3E90001 		strd	r0, [r3]
 196:Src/filter.c  ****             n[1 - active] = 0;
 532              		.loc 1 196 0
 533 00d6 0021     		movs	r1, #0
 534 00d8 3A4B     		ldr	r3, .L14+12
 535 00da 43F82210 		str	r1, [r3, r2, lsl #2]
 536              	.L12:
 197:Src/filter.c  ****         }
 198:Src/filter.c  ****         total_power[0] += x * x;
 537              		.loc 1 198 0
 538 00de 3046     		mov	r0, r6
 539 00e0 3946     		mov	r1, r7
 540 00e2 3246     		mov	r2, r6
 541 00e4 3B46     		mov	r3, r7
 542 00e6 FFF7FEFF 		bl	__aeabi_dmul
 543              	.LVL84:
 544 00ea 0646     		mov	r6, r0
 545              	.LVL85:
 546 00ec 0F46     		mov	r7, r1
 547 00ee DFF8DC80 		ldr	r8, .L14+20
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 14


 548              	.LVL86:
 549 00f2 D8E90001 		ldrd	r0, [r8]
 550 00f6 3246     		mov	r2, r6
 551 00f8 3B46     		mov	r3, r7
 552 00fa FFF7FEFF 		bl	__aeabi_dadd
 553              	.LVL87:
 554 00fe C8E90001 		strd	r0, [r8]
 199:Src/filter.c  ****         total_power[1] += x * x;
 555              		.loc 1 199 0
 556 0102 3046     		mov	r0, r6
 557 0104 3946     		mov	r1, r7
 558 0106 D8E90223 		ldrd	r2, [r8, #8]
 559 010a FFF7FEFF 		bl	__aeabi_dadd
 560              	.LVL88:
 561 010e C8E90201 		strd	r0, [r8, #8]
 200:Src/filter.c  ****         power = s_prev2[active] * s_prev2[active] + s_prev[active] * s_prev[active] - w_real * s_pr
 562              		.loc 1 200 0
 563 0112 E500     		lsls	r5, r4, #3
 564 0114 2E4B     		ldr	r3, .L14+24
 565 0116 2B44     		add	r3, r3, r5
 566 0118 D3E90067 		ldrd	r6, [r3]
 567 011c 3046     		mov	r0, r6
 568 011e 3946     		mov	r1, r7
 569 0120 3246     		mov	r2, r6
 570 0122 3B46     		mov	r3, r7
 571 0124 FFF7FEFF 		bl	__aeabi_dmul
 572              	.LVL89:
 573 0128 CDE90201 		strd	r0, [sp, #8]
 574 012c 244B     		ldr	r3, .L14+8
 575 012e 2B44     		add	r3, r3, r5
 576 0130 D3E900AB 		ldrd	r10, [r3]
 577 0134 5046     		mov	r0, r10
 578 0136 5946     		mov	r1, fp
 579 0138 5246     		mov	r2, r10
 580 013a 5B46     		mov	r3, fp
 581 013c FFF7FEFF 		bl	__aeabi_dmul
 582              	.LVL90:
 583 0140 0246     		mov	r2, r0
 584 0142 0B46     		mov	r3, r1
 585 0144 DDE90201 		ldrd	r0, [sp, #8]
 586 0148 FFF7FEFF 		bl	__aeabi_dadd
 587              	.LVL91:
 588 014c CDE90201 		strd	r0, [sp, #8]
 589 0150 DDE90001 		ldrd	r0, [sp]
 590 0154 5246     		mov	r2, r10
 591 0156 5B46     		mov	r3, fp
 592 0158 FFF7FEFF 		bl	__aeabi_dmul
 593              	.LVL92:
 594 015c 0246     		mov	r2, r0
 595 015e 0B46     		mov	r3, r1
 596 0160 3046     		mov	r0, r6
 597 0162 3946     		mov	r1, r7
 598 0164 FFF7FEFF 		bl	__aeabi_dmul
 599              	.LVL93:
 600 0168 0246     		mov	r2, r0
 601 016a 0B46     		mov	r3, r1
 602 016c DDE90201 		ldrd	r0, [sp, #8]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 15


 603 0170 FFF7FEFF 		bl	__aeabi_dsub
 604              	.LVL94:
 605 0174 0646     		mov	r6, r0
 606 0176 0F46     		mov	r7, r1
 607              	.LVL95:
 201:Src/filter.c  **** 
 202:Src/filter.c  ****         // printf("\n\npoooower %f\n", power);
 203:Src/filter.c  ****         return power / (total_power[active] + 1e-7) / n[active];
 608              		.loc 1 203 0
 609 0178 4544     		add	r5, r5, r8
 610 017a D5E90001 		ldrd	r0, [r5]
 611 017e 0EA3     		adr	r3, .L14
 612 0180 D3E90023 		ldrd	r2, [r3]
 613 0184 FFF7FEFF 		bl	__aeabi_dadd
 614              	.LVL96:
 615 0188 0246     		mov	r2, r0
 616 018a 0B46     		mov	r3, r1
 617 018c 3046     		mov	r0, r6
 618 018e 3946     		mov	r1, r7
 619 0190 FFF7FEFF 		bl	__aeabi_ddiv
 620              	.LVL97:
 621 0194 0646     		mov	r6, r0
 622              	.LVL98:
 623 0196 0F46     		mov	r7, r1
 624 0198 0A4B     		ldr	r3, .L14+12
 625 019a 53F82400 		ldr	r0, [r3, r4, lsl #2]
 626 019e FFF7FEFF 		bl	__aeabi_i2d
 627              	.LVL99:
 628 01a2 0246     		mov	r2, r0
 629 01a4 0B46     		mov	r3, r1
 630 01a6 3046     		mov	r0, r6
 631 01a8 3946     		mov	r1, r7
 632 01aa FFF7FEFF 		bl	__aeabi_ddiv
 633              	.LVL100:
 204:Src/filter.c  ****     }
 634              		.loc 1 204 0
 635 01ae 41EC100B 		fmdrr	d0, r0, r1
 636 01b2 05B0     		add	sp, sp, #20
 637              	.LCFI6:
 638              		.cfi_def_cfa_offset 36
 639              	.LVL101:
 640              		@ sp needed
 641 01b4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 642              	.LVL102:
 643              	.L15:
 644              		.align	3
 645              	.L14:
 646 01b8 48AFBC9A 		.word	2596056904
 647 01bc F2D77A3E 		.word	1048238066
 648 01c0 00000000 		.word	.LANCHOR3
 649 01c4 00000000 		.word	.LANCHOR5
 650 01c8 00000000 		.word	.LANCHOR6
 651 01cc 00000000 		.word	.LANCHOR7
 652 01d0 00000000 		.word	.LANCHOR4
 653 01d4 182D4454 		.word	1413754136
 654 01d8 FB211940 		.word	1075388923
 655              		.cfi_endproc
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 16


 656              	.LFE2:
 658              		.section	.bss.N.6072,"aw",%nobits
 659              		.align	2
 660              		.set	.LANCHOR6,. + 0
 663              	N.6072:
 664 0000 00000000 		.space	4
 665              		.section	.bss.d1.6059,"aw",%nobits
 666              		.align	3
 667              		.set	.LANCHOR0,. + 0
 670              	d1.6059:
 671 0000 00000000 		.space	8
 671      00000000 
 672              		.section	.bss.s_prev.6069,"aw",%nobits
 673              		.align	3
 674              		.set	.LANCHOR3,. + 0
 677              	s_prev.6069:
 678 0000 00000000 		.space	16
 678      00000000 
 678      00000000 
 678      00000000 
 679              		.section	.bss.total_power.6071,"aw",%nobits
 680              		.align	3
 681              		.set	.LANCHOR7,. + 0
 684              	total_power.6071:
 685 0000 00000000 		.space	16
 685      00000000 
 685      00000000 
 685      00000000 
 686              		.section	.bss.n.6078,"aw",%nobits
 687              		.align	2
 688              		.set	.LANCHOR5,. + 0
 691              	n.6078:
 692 0000 00000000 		.space	8
 692      00000000 
 693              		.section	.bss.s_prev2.6070,"aw",%nobits
 694              		.align	3
 695              		.set	.LANCHOR4,. + 0
 698              	s_prev2.6070:
 699 0000 00000000 		.space	16
 699      00000000 
 699      00000000 
 699      00000000 
 700              		.section	.bss.d2.6060,"aw",%nobits
 701              		.align	3
 702              		.set	.LANCHOR1,. + 0
 705              	d2.6060:
 706 0000 00000000 		.space	8
 706      00000000 
 707              		.section	.bss.y.6061,"aw",%nobits
 708              		.align	3
 709              		.set	.LANCHOR2,. + 0
 712              	y.6061:
 713 0000 00000000 		.space	8
 713      00000000 
 714              		.text
 715              	.Letext0:
 716              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 17


 717              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 718              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/math.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 filter.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:28     .text.goertzel:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:33     .text.goertzel:0000000000000000 goertzel
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:220    .text.goertzel:0000000000000130 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:227    .text.circular_goertzel_stream:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:232    .text.circular_goertzel_stream:0000000000000000 circular_goertzel_stream
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:393    .text.circular_goertzel_stream:0000000000000108 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:403    .text.tandem_goertzel_stream:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:408    .text.tandem_goertzel_stream:0000000000000000 tandem_goertzel_stream
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:646    .text.tandem_goertzel_stream:00000000000001b8 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:659    .bss.N.6072:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:663    .bss.N.6072:0000000000000000 N.6072
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:666    .bss.d1.6059:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:670    .bss.d1.6059:0000000000000000 d1.6059
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:673    .bss.s_prev.6069:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:677    .bss.s_prev.6069:0000000000000000 s_prev.6069
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:680    .bss.total_power.6071:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:684    .bss.total_power.6071:0000000000000000 total_power.6071
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:687    .bss.n.6078:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:691    .bss.n.6078:0000000000000000 n.6078
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:694    .bss.s_prev2.6070:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:698    .bss.s_prev2.6070:0000000000000000 s_prev2.6070
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:701    .bss.d2.6060:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:705    .bss.d2.6060:0000000000000000 d2.6060
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:708    .bss.y.6061:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cc0V8PUp.s:712    .bss.y.6061:0000000000000000 y.6061
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_ui2d
__aeabi_dmul
__aeabi_dadd
__aeabi_dsub
floor
cos
log
