ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"filter.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	__aeabi_i2d
  21              		.global	__aeabi_ddiv
  22              		.global	__aeabi_dmul
  23              		.global	__aeabi_dadd
  24              		.global	__aeabi_dsub
  25              		.section	.text.goertzel,"ax",%progbits
  26              		.align	2
  27              		.global	goertzel
  28              		.thumb
  29              		.thumb_func
  31              	goertzel:
  32              	.LFB0:
  33              		.file 1 "Src/filter.c"
   1:Src/filter.c  **** #include "assert.h"
   2:Src/filter.c  **** #include "stdio.h"
   3:Src/filter.c  **** #include "stdlib.h"
   4:Src/filter.c  **** #include "math.h"
   5:Src/filter.c  **** 
   6:Src/filter.c  **** #include "filter.h"
   7:Src/filter.c  **** #include "circular_buffer.h"
   8:Src/filter.c  **** 
   9:Src/filter.c  **** #define PI 3.141592653589793
  10:Src/filter.c  **** 
  11:Src/filter.c  **** #define BANDWITH 200
  12:Src/filter.c  **** #define NUM_FREQS 2
  13:Src/filter.c  **** 
  14:Src/filter.c  **** /*
  15:Src/filter.c  **** return the goertzel algorithm evaluation for the given inputs
  16:Src/filter.c  **** - x is an array of samples
  17:Src/filter.c  **** - sample_rate is the sample rate at which x was taken
  18:Src/filter.c  **** - freqs is an array of pairs of lower and upper bounds for frequencies
  19:Src/filter.c  ****     - example: freqs = [400, 500, 1000, 1100] would mean that we are looking at 2 bands of frequenc
  20:Src/filter.c  ****     - by it's nature, freqs must have an even number of inputs
  21:Src/filter.c  ****     - BANDWITHS MUST BE THE SAME FOR EACH FREQ PAIR
  22:Src/filter.c  ****         - TODO: Generalize for variable bandwiths
  23:Src/filter.c  **** - results must be 'results[num_freqs / 2][size_of_bin]'
  24:Src/filter.c  **** 
  25:Src/filter.c  **** TODO:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 2


  26:Src/filter.c  ****     - optimize w/ pointers
  27:Src/filter.c  ****     - optimize for use in other files
  28:Src/filter.c  **** */
  29:Src/filter.c  **** 
  30:Src/filter.c  **** double goertzel(int *x, int sample_rate, int freq, int window_size)
  31:Src/filter.c  **** {
  34              		.loc 1 31 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 16
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38              	.LVL0:
  39 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 36
  42              		.cfi_offset 4, -36
  43              		.cfi_offset 5, -32
  44              		.cfi_offset 6, -28
  45              		.cfi_offset 7, -24
  46              		.cfi_offset 8, -20
  47              		.cfi_offset 9, -16
  48              		.cfi_offset 10, -12
  49              		.cfi_offset 11, -8
  50              		.cfi_offset 14, -4
  51 0004 85B0     		sub	sp, sp, #20
  52              	.LCFI1:
  53              		.cfi_def_cfa_offset 56
  54 0006 8146     		mov	r9, r0
  55 0008 9246     		mov	r10, r2
  56 000a 9846     		mov	r8, r3
  32:Src/filter.c  ****     // Set up initial parameters
  33:Src/filter.c  ****     double f_step = sample_rate / (double)window_size;
  57              		.loc 1 33 0
  58 000c 0846     		mov	r0, r1
  59              	.LVL1:
  60 000e FFF7FEFF 		bl	__aeabi_i2d
  61              	.LVL2:
  62 0012 0446     		mov	r4, r0
  63 0014 0D46     		mov	r5, r1
  64 0016 4046     		mov	r0, r8
  65 0018 FFF7FEFF 		bl	__aeabi_i2d
  66              	.LVL3:
  67 001c 0646     		mov	r6, r0
  68 001e 0F46     		mov	r7, r1
  69 0020 2046     		mov	r0, r4
  70 0022 2946     		mov	r1, r5
  71 0024 3246     		mov	r2, r6
  72 0026 3B46     		mov	r3, r7
  73 0028 FFF7FEFF 		bl	__aeabi_ddiv
  74              	.LVL4:
  75 002c 0446     		mov	r4, r0
  76 002e 0D46     		mov	r5, r1
  77              	.LVL5:
  34:Src/filter.c  ****     double f_step_normalized = 1.0 / window_size;
  78              		.loc 1 34 0
  79 0030 0020     		movs	r0, #0
  80 0032 3F49     		ldr	r1, .L5+8
  81 0034 3246     		mov	r2, r6
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 3


  82 0036 3B46     		mov	r3, r7
  83 0038 FFF7FEFF 		bl	__aeabi_ddiv
  84              	.LVL6:
  85 003c 0646     		mov	r6, r0
  86 003e 0F46     		mov	r7, r1
  87              	.LVL7:
  35:Src/filter.c  **** 
  36:Src/filter.c  ****     double k = freq / f_step;
  88              		.loc 1 36 0
  89 0040 5046     		mov	r0, r10
  90 0042 FFF7FEFF 		bl	__aeabi_i2d
  91              	.LVL8:
  92 0046 2246     		mov	r2, r4
  93 0048 2B46     		mov	r3, r5
  94 004a FFF7FEFF 		bl	__aeabi_ddiv
  95              	.LVL9:
  37:Src/filter.c  **** 
  38:Src/filter.c  ****     // number of frequencies is the same size as the number of
  39:Src/filter.c  ****     // upper and lower bin limits; loop through bin limits (i.e.
  40:Src/filter.c  ****     // k_start and k_end pairs, and evaluate goertzel from there)
  41:Src/filter.c  ****     double normalizedfreq, w_real;
  42:Src/filter.c  **** 
  43:Src/filter.c  ****     normalizedfreq = k * f_step_normalized;
  96              		.loc 1 43 0
  97 004e 3246     		mov	r2, r6
  98 0050 3B46     		mov	r3, r7
  99 0052 FFF7FEFF 		bl	__aeabi_dmul
 100              	.LVL10:
  44:Src/filter.c  ****     w_real = 2.0 * cos(2.0 * PI * normalizedfreq);
 101              		.loc 1 44 0
 102 0056 34A3     		adr	r3, .L5
 103 0058 D3E90023 		ldrd	r2, [r3]
 104 005c FFF7FEFF 		bl	__aeabi_dmul
 105              	.LVL11:
 106 0060 41EC100B 		fmdrr	d0, r0, r1
 107 0064 FFF7FEFF 		bl	cos
 108              	.LVL12:
 109 0068 53EC102B 		fmrrd	r2, r3, d0
 110 006c 10EE100A 		fmrs	r0, s0	@ int
 111 0070 1946     		mov	r1, r3
 112 0072 FFF7FEFF 		bl	__aeabi_dadd
 113              	.LVL13:
 114 0076 CDE90201 		strd	r0, [sp, #8]
 115              	.LVL14:
  45:Src/filter.c  ****     double d1 = 0, d2 = 0, y = 0;
  46:Src/filter.c  ****     int n = 0;
 116              		.loc 1 46 0
 117 007a 4FF0000A 		mov	r10, #0
 118              	.LVL15:
  45:Src/filter.c  ****     double d1 = 0, d2 = 0, y = 0;
 119              		.loc 1 45 0
 120 007e 0026     		movs	r6, #0
 121              	.LVL16:
 122 0080 0027     		movs	r7, #0
 123 0082 3446     		mov	r4, r6
 124              	.LVL17:
 125 0084 3D46     		mov	r5, r7
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 4


 126 0086 CDE90067 		strd	r6, [sp]
 127 008a 4E46     		mov	r6, r9
 128 008c C346     		mov	fp, r8
  47:Src/filter.c  ****     while (n < window_size)
 129              		.loc 1 47 0
 130 008e 1AE0     		b	.L2
 131              	.LVL18:
 132              	.L3:
  48:Src/filter.c  ****     {
  49:Src/filter.c  ****         y = x[n] + w_real * d1 - d2;
 133              		.loc 1 49 0
 134 0090 56F82A70 		ldr	r7, [r6, r10, lsl #2]
 135 0094 DDE90201 		ldrd	r0, [sp, #8]
 136 0098 2246     		mov	r2, r4
 137 009a 2B46     		mov	r3, r5
 138 009c FFF7FEFF 		bl	__aeabi_dmul
 139              	.LVL19:
 140 00a0 8046     		mov	r8, r0
 141 00a2 8946     		mov	r9, r1
 142 00a4 3846     		mov	r0, r7
 143 00a6 FFF7FEFF 		bl	__aeabi_i2d
 144              	.LVL20:
 145 00aa 4246     		mov	r2, r8
 146 00ac 4B46     		mov	r3, r9
 147 00ae FFF7FEFF 		bl	__aeabi_dadd
 148              	.LVL21:
 149 00b2 DDE90023 		ldrd	r2, [sp]
 150 00b6 FFF7FEFF 		bl	__aeabi_dsub
 151              	.LVL22:
  50:Src/filter.c  ****         d2 = d1;
  51:Src/filter.c  ****         d1 = y;
  52:Src/filter.c  ****         n++;
 152              		.loc 1 52 0
 153 00ba 0AF1010A 		add	r10, r10, #1
 154              	.LVL23:
  50:Src/filter.c  ****         d2 = d1;
 155              		.loc 1 50 0
 156 00be CDE90045 		strd	r4, [sp]
  51:Src/filter.c  ****         n++;
 157              		.loc 1 51 0
 158 00c2 0446     		mov	r4, r0
 159              	.LVL24:
 160 00c4 0D46     		mov	r5, r1
 161              	.LVL25:
 162              	.L2:
  47:Src/filter.c  ****     {
 163              		.loc 1 47 0
 164 00c6 DA45     		cmp	r10, fp
 165 00c8 E2DB     		blt	.L3
 166 00ca DDE90067 		ldrd	r6, [sp]
 167              	.LVL26:
  53:Src/filter.c  ****     }
  54:Src/filter.c  **** 
  55:Src/filter.c  ****     // Calculate power, and put it in its results spot
  56:Src/filter.c  ****     return d2 * d2 + d1 * d1 - w_real * d1 * d2;
 168              		.loc 1 56 0
 169 00ce 3046     		mov	r0, r6
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 5


 170 00d0 3946     		mov	r1, r7
 171 00d2 3246     		mov	r2, r6
 172 00d4 3B46     		mov	r3, r7
 173 00d6 FFF7FEFF 		bl	__aeabi_dmul
 174              	.LVL27:
 175 00da 8046     		mov	r8, r0
 176 00dc 8946     		mov	r9, r1
 177 00de 2046     		mov	r0, r4
 178 00e0 2946     		mov	r1, r5
 179 00e2 2246     		mov	r2, r4
 180 00e4 2B46     		mov	r3, r5
 181 00e6 FFF7FEFF 		bl	__aeabi_dmul
 182              	.LVL28:
 183 00ea 0246     		mov	r2, r0
 184 00ec 0B46     		mov	r3, r1
 185 00ee 4046     		mov	r0, r8
 186 00f0 4946     		mov	r1, r9
 187 00f2 FFF7FEFF 		bl	__aeabi_dadd
 188              	.LVL29:
 189 00f6 8046     		mov	r8, r0
 190 00f8 8946     		mov	r9, r1
 191 00fa DDE90201 		ldrd	r0, [sp, #8]
 192 00fe 2246     		mov	r2, r4
 193 0100 2B46     		mov	r3, r5
 194 0102 FFF7FEFF 		bl	__aeabi_dmul
 195              	.LVL30:
 196 0106 3246     		mov	r2, r6
 197 0108 3B46     		mov	r3, r7
 198 010a FFF7FEFF 		bl	__aeabi_dmul
 199              	.LVL31:
 200 010e 0246     		mov	r2, r0
 201 0110 0B46     		mov	r3, r1
 202 0112 4046     		mov	r0, r8
 203 0114 4946     		mov	r1, r9
 204 0116 FFF7FEFF 		bl	__aeabi_dsub
 205              	.LVL32:
  57:Src/filter.c  **** }
 206              		.loc 1 57 0
 207 011a 41EC100B 		fmdrr	d0, r0, r1
 208 011e 05B0     		add	sp, sp, #20
 209              	.LCFI2:
 210              		.cfi_def_cfa_offset 36
 211              	.LVL33:
 212              		@ sp needed
 213 0120 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 214              	.LVL34:
 215              	.L6:
 216 0124 AFF30080 		.align	3
 217              	.L5:
 218 0128 182D4454 		.word	1413754136
 219 012c FB211940 		.word	1075388923
 220 0130 0000F03F 		.word	1072693248
 221              		.cfi_endproc
 222              	.LFE0:
 224              		.section	.text.circular_goertzel_stream,"ax",%progbits
 225              		.align	2
 226              		.global	circular_goertzel_stream
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 6


 227              		.thumb
 228              		.thumb_func
 230              	circular_goertzel_stream:
 231              	.LFB1:
  58:Src/filter.c  **** 
  59:Src/filter.c  **** double circular_goertzel_stream(double x, int freq, int sample_rate, int window_size)
  60:Src/filter.c  **** {
 232              		.loc 1 60 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 8
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              	.LVL35:
 237 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 238              	.LCFI3:
 239              		.cfi_def_cfa_offset 36
 240              		.cfi_offset 4, -36
 241              		.cfi_offset 5, -32
 242              		.cfi_offset 6, -28
 243              		.cfi_offset 7, -24
 244              		.cfi_offset 8, -20
 245              		.cfi_offset 9, -16
 246              		.cfi_offset 10, -12
 247              		.cfi_offset 11, -8
 248              		.cfi_offset 14, -4
 249 0004 83B0     		sub	sp, sp, #12
 250              	.LCFI4:
 251              		.cfi_def_cfa_offset 48
 252 0006 59EC108B 		fmrrd	r8, r9, d0
 253 000a 8246     		mov	r10, r0
 254 000c 0D46     		mov	r5, r1
 255 000e 1446     		mov	r4, r2
  61:Src/filter.c  ****     // Set up and initialize circular_buffer
  62:Src/filter.c  ****     static int initialized = 0;
  63:Src/filter.c  ****     static circ_bufsum_t cbuf;
  64:Src/filter.c  ****     if (!initialized)
 256              		.loc 1 64 0
 257 0010 5D4B     		ldr	r3, .L10+8
 258 0012 1B68     		ldr	r3, [r3]
 259 0014 3BB9     		cbnz	r3, .L8
  65:Src/filter.c  ****     {
  66:Src/filter.c  ****         circ_bufsum_init(&cbuf, window_size);
 260              		.loc 1 66 0
 261 0016 5D48     		ldr	r0, .L10+12
 262              	.LVL36:
 263 0018 1146     		mov	r1, r2
 264              	.LVL37:
 265 001a FFF7FEFF 		bl	circ_bufsum_init
 266              	.LVL38:
  67:Src/filter.c  ****         initialized = - 1;
 267              		.loc 1 67 0
 268 001e 4FF0FF32 		mov	r2, #-1
 269 0022 594B     		ldr	r3, .L10+8
 270 0024 1A60     		str	r2, [r3]
 271              	.L8:
  68:Src/filter.c  ****     }
  69:Src/filter.c  **** 
  70:Src/filter.c  ****     // Set up initial parameters
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 7


  71:Src/filter.c  ****     double f_step = sample_rate / (double)window_size;
 272              		.loc 1 71 0
 273 0026 2846     		mov	r0, r5
 274 0028 FFF7FEFF 		bl	__aeabi_i2d
 275              	.LVL39:
 276 002c 0646     		mov	r6, r0
 277 002e 0F46     		mov	r7, r1
 278 0030 2046     		mov	r0, r4
 279 0032 FFF7FEFF 		bl	__aeabi_i2d
 280              	.LVL40:
 281 0036 0446     		mov	r4, r0
 282              	.LVL41:
 283 0038 0D46     		mov	r5, r1
 284              	.LVL42:
 285 003a 3046     		mov	r0, r6
 286 003c 3946     		mov	r1, r7
 287 003e 2246     		mov	r2, r4
 288 0040 2B46     		mov	r3, r5
 289 0042 FFF7FEFF 		bl	__aeabi_ddiv
 290              	.LVL43:
 291 0046 0646     		mov	r6, r0
 292 0048 0F46     		mov	r7, r1
 293              	.LVL44:
  72:Src/filter.c  ****     double f_step_normalized = 1.0 / window_size;
 294              		.loc 1 72 0
 295 004a 0020     		movs	r0, #0
 296 004c 5049     		ldr	r1, .L10+16
 297 004e 2246     		mov	r2, r4
 298 0050 2B46     		mov	r3, r5
 299 0052 FFF7FEFF 		bl	__aeabi_ddiv
 300              	.LVL45:
 301 0056 0446     		mov	r4, r0
 302 0058 0D46     		mov	r5, r1
 303              	.LVL46:
  73:Src/filter.c  **** 
  74:Src/filter.c  ****     // Calculate freq bin (for calc of frequency)
  75:Src/filter.c  ****     double k = freq / f_step;
 304              		.loc 1 75 0
 305 005a 5046     		mov	r0, r10
 306 005c FFF7FEFF 		bl	__aeabi_i2d
 307              	.LVL47:
 308 0060 3246     		mov	r2, r6
 309 0062 3B46     		mov	r3, r7
 310 0064 FFF7FEFF 		bl	__aeabi_ddiv
 311              	.LVL48:
  76:Src/filter.c  **** 
  77:Src/filter.c  ****     // Get rid of for loop of num_freqs,etc
  78:Src/filter.c  ****     // Bin frequency and coefficients for computation
  79:Src/filter.c  ****     // TODO: MAKE STATIC? i.e. w_real is constant across t
  80:Src/filter.c  ****     //       for one frequency!
  81:Src/filter.c  ****     double normalizedfreq, w_real;
  82:Src/filter.c  ****     normalizedfreq = k * f_step_normalized;
 312              		.loc 1 82 0
 313 0068 2246     		mov	r2, r4
 314 006a 2B46     		mov	r3, r5
 315 006c FFF7FEFF 		bl	__aeabi_dmul
 316              	.LVL49:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 8


  83:Src/filter.c  ****     w_real = 2.0 * cos(2.0 * PI * normalizedfreq);
 317              		.loc 1 83 0
 318 0070 43A3     		adr	r3, .L10
 319 0072 D3E90023 		ldrd	r2, [r3]
 320 0076 FFF7FEFF 		bl	__aeabi_dmul
 321              	.LVL50:
 322 007a 41EC100B 		fmdrr	d0, r0, r1
 323 007e FFF7FEFF 		bl	cos
 324              	.LVL51:
 325 0082 53EC102B 		fmrrd	r2, r3, d0
 326 0086 10EE100A 		fmrs	r0, s0	@ int
 327 008a 1946     		mov	r1, r3
 328 008c FFF7FEFF 		bl	__aeabi_dadd
 329              	.LVL52:
 330 0090 CDE90001 		strd	r0, [sp]
 331              	.LVL53:
  84:Src/filter.c  **** 
  85:Src/filter.c  ****     /*
  86:Src/filter.c  ****     ALGO:
  87:Src/filter.c  ****         while cbuf->size < WINDOW_SIZE
  88:Src/filter.c  ****             perform this loop (put new values of y into cbuf)
  89:Src/filter.c  ****         put new values into cbuf, subtract old y from d1 values
  90:Src/filter.c  **** 
  91:Src/filter.c  ****     TODO: Optimize circ_bufsum_add_sample to be able to be used when queue is not empty
  92:Src/filter.c  ****     */
  93:Src/filter.c  ****     static double d1 = 0;
  94:Src/filter.c  ****     static double d2 = 0; 
  95:Src/filter.c  ****     static double y  = 0;
  96:Src/filter.c  ****     static double total_power = 0;
  97:Src/filter.c  ****     printf("num_els: %lu, ", cbuf.num_els);
 332              		.loc 1 97 0
 333 0094 3D4C     		ldr	r4, .L10+12
 334              	.LVL54:
 335 0096 3F48     		ldr	r0, .L10+20
 336              	.LVL55:
 337 0098 A168     		ldr	r1, [r4, #8]
 338 009a FFF7FEFF 		bl	printf
 339              	.LVL56:
  98:Src/filter.c  ****     // Now the cbuf is full; add values, and subtract old y from d1
  99:Src/filter.c  ****     y = x + w_real * d1 - d2;
 340              		.loc 1 99 0
 341 009e 3E4E     		ldr	r6, .L10+24
 342              	.LVL57:
 343 00a0 D6E900AB 		ldrd	r10, [r6]
 344              	.LVL58:
 345 00a4 DDE90001 		ldrd	r0, [sp]
 346 00a8 5246     		mov	r2, r10
 347 00aa 5B46     		mov	r3, fp
 348 00ac FFF7FEFF 		bl	__aeabi_dmul
 349              	.LVL59:
 350 00b0 4246     		mov	r2, r8
 351 00b2 4B46     		mov	r3, r9
 352 00b4 FFF7FEFF 		bl	__aeabi_dadd
 353              	.LVL60:
 354 00b8 384F     		ldr	r7, .L10+28
 355 00ba D7E90023 		ldrd	r2, [r7]
 356 00be FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 9


 357              	.LVL61:
 358 00c2 41EC100B 		fmdrr	d0, r0, r1
 359 00c6 364D     		ldr	r5, .L10+32
 360 00c8 C5E90001 		strd	r0, [r5]
 100:Src/filter.c  ****     d2 = d1;
 361              		.loc 1 100 0
 362 00cc C7E900AB 		strd	r10, [r7]
 101:Src/filter.c  ****     double a = circ_bufsum_add_sample(&cbuf, y);
 363              		.loc 1 101 0
 364 00d0 2046     		mov	r0, r4
 365 00d2 FFF7FEFF 		bl	circ_bufsum_add_sample
 366              	.LVL62:
 367 00d6 5BEC10AB 		fmrrd	r10, fp, d0
 368              	.LVL63:
 102:Src/filter.c  ****     d1 = y - a;
 369              		.loc 1 102 0
 370 00da D5E90001 		ldrd	r0, [r5]
 371 00de 10EE102A 		fmrs	r2, s0	@ int
 372 00e2 5B46     		mov	r3, fp
 373 00e4 FFF7FEFF 		bl	__aeabi_dsub
 374              	.LVL64:
 375 00e8 C6E90001 		strd	r0, [r6]
 103:Src/filter.c  ****     printf("%f", a);
 376              		.loc 1 103 0
 377 00ec 2D48     		ldr	r0, .L10+36
 378 00ee 5246     		mov	r2, r10
 379 00f0 5B46     		mov	r3, fp
 380 00f2 FFF7FEFF 		bl	printf
 381              	.LVL65:
 104:Src/filter.c  **** 
 105:Src/filter.c  ****     // printf("FRQ: %.9f", normalizedfreq * sample_rate);
 106:Src/filter.c  ****     // printf(" VAL: %.9f\n", d2 * d2 + d1 * d1 - w_real * d1 * d2);
 107:Src/filter.c  ****     // // Calculate power, and put it in its results spot
 108:Src/filter.c  ****     // MAY NEED TO NORMAILZE POWER
 109:Src/filter.c  ****     total_power += x * x;
 382              		.loc 1 109 0
 383 00f6 4046     		mov	r0, r8
 384 00f8 4946     		mov	r1, r9
 385 00fa 4246     		mov	r2, r8
 386 00fc 4B46     		mov	r3, r9
 387 00fe FFF7FEFF 		bl	__aeabi_dmul
 388              	.LVL66:
 389 0102 294C     		ldr	r4, .L10+40
 390 0104 D4E90023 		ldrd	r2, [r4]
 391 0108 FFF7FEFF 		bl	__aeabi_dadd
 392              	.LVL67:
 393 010c 8246     		mov	r10, r0
 394              	.LVL68:
 395 010e 8B46     		mov	fp, r1
 396 0110 C4E900AB 		strd	r10, [r4]
 110:Src/filter.c  ****     return ((d2 * d2 + d1 * d1 - w_real * d1 * d2)) / (total_power);
 397              		.loc 1 110 0
 398 0114 D7E90089 		ldrd	r8, [r7]
 399              	.LVL69:
 400 0118 4046     		mov	r0, r8
 401 011a 4946     		mov	r1, r9
 402 011c 4246     		mov	r2, r8
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 10


 403 011e 4B46     		mov	r3, r9
 404 0120 FFF7FEFF 		bl	__aeabi_dmul
 405              	.LVL70:
 406 0124 0446     		mov	r4, r0
 407 0126 0D46     		mov	r5, r1
 408 0128 D6E90067 		ldrd	r6, [r6]
 409 012c 3046     		mov	r0, r6
 410 012e 3946     		mov	r1, r7
 411 0130 3246     		mov	r2, r6
 412 0132 3B46     		mov	r3, r7
 413 0134 FFF7FEFF 		bl	__aeabi_dmul
 414              	.LVL71:
 415 0138 0246     		mov	r2, r0
 416 013a 0B46     		mov	r3, r1
 417 013c 2046     		mov	r0, r4
 418 013e 2946     		mov	r1, r5
 419 0140 FFF7FEFF 		bl	__aeabi_dadd
 420              	.LVL72:
 421 0144 0446     		mov	r4, r0
 422 0146 0D46     		mov	r5, r1
 423 0148 DDE90001 		ldrd	r0, [sp]
 424 014c 3246     		mov	r2, r6
 425 014e 3B46     		mov	r3, r7
 426 0150 FFF7FEFF 		bl	__aeabi_dmul
 427              	.LVL73:
 428 0154 0246     		mov	r2, r0
 429 0156 0B46     		mov	r3, r1
 430 0158 4046     		mov	r0, r8
 431 015a 4946     		mov	r1, r9
 432 015c FFF7FEFF 		bl	__aeabi_dmul
 433              	.LVL74:
 434 0160 0246     		mov	r2, r0
 435 0162 0B46     		mov	r3, r1
 436 0164 2046     		mov	r0, r4
 437 0166 2946     		mov	r1, r5
 438 0168 FFF7FEFF 		bl	__aeabi_dsub
 439              	.LVL75:
 440 016c 5246     		mov	r2, r10
 441 016e 5B46     		mov	r3, fp
 442 0170 FFF7FEFF 		bl	__aeabi_ddiv
 443              	.LVL76:
 111:Src/filter.c  **** }
 444              		.loc 1 111 0
 445 0174 41EC100B 		fmdrr	d0, r0, r1
 446 0178 03B0     		add	sp, sp, #12
 447              	.LCFI5:
 448              		.cfi_def_cfa_offset 36
 449              	.LVL77:
 450              		@ sp needed
 451 017a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 452              	.LVL78:
 453              	.L11:
 454 017e 00BF     		.align	3
 455              	.L10:
 456 0180 182D4454 		.word	1413754136
 457 0184 FB211940 		.word	1075388923
 458 0188 00000000 		.word	.LANCHOR0
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 11


 459 018c 00000000 		.word	.LANCHOR1
 460 0190 0000F03F 		.word	1072693248
 461 0194 00000000 		.word	.LC0
 462 0198 00000000 		.word	.LANCHOR2
 463 019c 00000000 		.word	.LANCHOR3
 464 01a0 00000000 		.word	.LANCHOR4
 465 01a4 10000000 		.word	.LC1
 466 01a8 00000000 		.word	.LANCHOR5
 467              		.cfi_endproc
 468              	.LFE1:
 470              		.section	.text.tandem_goertzel_stream,"ax",%progbits
 471              		.align	2
 472              		.global	tandem_goertzel_stream
 473              		.thumb
 474              		.thumb_func
 476              	tandem_goertzel_stream:
 477              	.LFB2:
 112:Src/filter.c  **** 
 113:Src/filter.c  **** /*
 114:Src/filter.c  **** Takes a stream of samples at sample_rate. returns current power every iteration
 115:Src/filter.c  **** sample_rate = 1024
 116:Src/filter.c  **** resetsample = 512
 117:Src/filter.c  **** 
 118:Src/filter.c  **** Adapted from https://netwerkt.wordpress.com/2011/08/25/goertzel-filter/
 119:Src/filter.c  **** */
 120:Src/filter.c  **** double tandem_goertzel_stream(double x, int freq, int sample_rate, int resetsample)
 121:Src/filter.c  **** {
 478              		.loc 1 121 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 16
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482              	.LVL79:
 483 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 484              	.LCFI6:
 485              		.cfi_def_cfa_offset 36
 486              		.cfi_offset 4, -36
 487              		.cfi_offset 5, -32
 488              		.cfi_offset 6, -28
 489              		.cfi_offset 7, -24
 490              		.cfi_offset 8, -20
 491              		.cfi_offset 9, -16
 492              		.cfi_offset 10, -12
 493              		.cfi_offset 11, -8
 494              		.cfi_offset 14, -4
 495 0004 85B0     		sub	sp, sp, #20
 496              	.LCFI7:
 497              		.cfi_def_cfa_offset 56
 498 0006 57EC106B 		fmrrd	r6, r7, d0
 499 000a 9046     		mov	r8, r2
 122:Src/filter.c  ****     static double s_prev[2] = {0.0, 0.0};
 123:Src/filter.c  ****     static double s_prev2[2] = {0.0, 0.0};
 124:Src/filter.c  ****     static double total_power[2] = {0.0, 0.0};
 125:Src/filter.c  ****     static int N = 0;
 126:Src/filter.c  ****     double w_real, normalizedfreq, power, s;
 127:Src/filter.c  ****     int active;
 128:Src/filter.c  ****     static int n[2] = {0, 0};
 129:Src/filter.c  **** 
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 12


 130:Src/filter.c  ****     normalizedfreq = freq / sample_rate;
 500              		.loc 1 130 0
 501 000c 90FBF1F0 		sdiv	r0, r0, r1
 502              	.LVL80:
 503 0010 FFF7FEFF 		bl	__aeabi_i2d
 504              	.LVL81:
 131:Src/filter.c  ****     w_real = 2.0 * cos(2.0 * PI * normalizedfreq);
 505              		.loc 1 131 0
 506 0014 6FA3     		adr	r3, .L15+28
 507 0016 D3E90023 		ldrd	r2, [r3]
 508 001a FFF7FEFF 		bl	__aeabi_dmul
 509              	.LVL82:
 510 001e 41EC100B 		fmdrr	d0, r0, r1
 511 0022 FFF7FEFF 		bl	cos
 512              	.LVL83:
 513 0026 53EC102B 		fmrrd	r2, r3, d0
 514 002a 10EE100A 		fmrs	r0, s0	@ int
 515 002e 1946     		mov	r1, r3
 516 0030 FFF7FEFF 		bl	__aeabi_dadd
 517              	.LVL84:
 518 0034 0246     		mov	r2, r0
 519 0036 0B46     		mov	r3, r1
 520 0038 CDE90023 		strd	r2, [sp]
 521              	.LVL85:
 132:Src/filter.c  **** 
 133:Src/filter.c  ****     // Calculate the first set of samples
 134:Src/filter.c  ****     s = x + w_real * s_prev[0] - s_prev2[0];
 522              		.loc 1 134 0
 523 003c 604C     		ldr	r4, .L15+8
 524 003e D4E900AB 		ldrd	r10, [r4]
 525 0042 5046     		mov	r0, r10
 526 0044 5946     		mov	r1, fp
 527 0046 FFF7FEFF 		bl	__aeabi_dmul
 528              	.LVL86:
 529 004a 3246     		mov	r2, r6
 530 004c 3B46     		mov	r3, r7
 531 004e FFF7FEFF 		bl	__aeabi_dadd
 532              	.LVL87:
 533 0052 DFF87C91 		ldr	r9, .L15+24
 534 0056 D9E90023 		ldrd	r2, [r9]
 535 005a FFF7FEFF 		bl	__aeabi_dsub
 536              	.LVL88:
 135:Src/filter.c  ****     s_prev2[0] = s_prev[0];
 537              		.loc 1 135 0
 538 005e C9E900AB 		strd	r10, [r9]
 136:Src/filter.c  ****     s_prev[0] = s;
 539              		.loc 1 136 0
 540 0062 C4E90001 		strd	r0, [r4]
 137:Src/filter.c  ****     n[0]++;
 541              		.loc 1 137 0
 542 0066 574D     		ldr	r5, .L15+12
 543 0068 2B68     		ldr	r3, [r5]
 544 006a 0133     		adds	r3, r3, #1
 545 006c 2B60     		str	r3, [r5]
 138:Src/filter.c  **** 
 139:Src/filter.c  ****     // Calculate the second set of samples
 140:Src/filter.c  ****     s = x + w_real * s_prev[1] - s_prev2[1];
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 13


 546              		.loc 1 140 0
 547 006e D4E902AB 		ldrd	r10, [r4, #8]
 548 0072 5046     		mov	r0, r10
 549              	.LVL89:
 550 0074 5946     		mov	r1, fp
 551 0076 DDE90023 		ldrd	r2, [sp]
 552 007a FFF7FEFF 		bl	__aeabi_dmul
 553              	.LVL90:
 554 007e 3246     		mov	r2, r6
 555 0080 3B46     		mov	r3, r7
 556 0082 FFF7FEFF 		bl	__aeabi_dadd
 557              	.LVL91:
 558 0086 D9E90223 		ldrd	r2, [r9, #8]
 559 008a FFF7FEFF 		bl	__aeabi_dsub
 560              	.LVL92:
 141:Src/filter.c  ****     s_prev2[1] = s_prev[1];
 561              		.loc 1 141 0
 562 008e C9E902AB 		strd	r10, [r9, #8]
 142:Src/filter.c  ****     s_prev[1] = s;
 563              		.loc 1 142 0
 564 0092 C4E90201 		strd	r0, [r4, #8]
 143:Src/filter.c  ****     n[1]++;
 565              		.loc 1 143 0
 566 0096 6B68     		ldr	r3, [r5, #4]
 567 0098 0133     		adds	r3, r3, #1
 568 009a 6B60     		str	r3, [r5, #4]
 144:Src/filter.c  **** 
 145:Src/filter.c  ****     N++;
 569              		.loc 1 145 0
 570 009c 4A4B     		ldr	r3, .L15+16
 571 009e 1C68     		ldr	r4, [r3]
 572 00a0 0134     		adds	r4, r4, #1
 573 00a2 1C60     		str	r4, [r3]
 146:Src/filter.c  **** 
 147:Src/filter.c  ****     // reset inactive
 148:Src/filter.c  ****     active = (N / resetsample) & 0x01;
 574              		.loc 1 148 0
 575 00a4 94FBF8F4 		sdiv	r4, r4, r8
 576 00a8 04F00104 		and	r4, r4, #1
 577              	.LVL93:
 149:Src/filter.c  ****     if (n[1 - active] >= resetsample)
 578              		.loc 1 149 0
 579 00ac C4F10102 		rsb	r2, r4, #1
 580 00b0 55F82230 		ldr	r3, [r5, r2, lsl #2]
 581 00b4 4345     		cmp	r3, r8
 582 00b6 12DB     		blt	.L13
 150:Src/filter.c  ****     {
 151:Src/filter.c  ****         s_prev[1 - active] = 0.0;
 583              		.loc 1 151 0
 584 00b8 D300     		lsls	r3, r2, #3
 585 00ba 414D     		ldr	r5, .L15+8
 586 00bc 1D44     		add	r5, r5, r3
 587 00be 0020     		movs	r0, #0
 588              	.LVL94:
 589 00c0 0021     		movs	r1, #0
 590 00c2 C5E90001 		strd	r0, [r5]
 591              	.LVL95:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 14


 152:Src/filter.c  ****         s_prev2[1 - active] = 0.0;
 592              		.loc 1 152 0
 593 00c6 4D46     		mov	r5, r9
 594 00c8 1D44     		add	r5, r5, r3
 595 00ca C5E90001 		strd	r0, [r5]
 153:Src/filter.c  ****         total_power[1 - active] = 0.0;
 596              		.loc 1 153 0
 597 00ce 3F4D     		ldr	r5, .L15+20
 598 00d0 2B44     		add	r3, r3, r5
 599 00d2 C3E90001 		strd	r0, [r3]
 154:Src/filter.c  ****         n[1 - active] = 0;
 600              		.loc 1 154 0
 601 00d6 0021     		movs	r1, #0
 602 00d8 3A4B     		ldr	r3, .L15+12
 603 00da 43F82210 		str	r1, [r3, r2, lsl #2]
 604              	.L13:
 155:Src/filter.c  ****     }
 156:Src/filter.c  ****     total_power[0] += x * x;
 605              		.loc 1 156 0
 606 00de 3046     		mov	r0, r6
 607 00e0 3946     		mov	r1, r7
 608 00e2 3246     		mov	r2, r6
 609 00e4 3B46     		mov	r3, r7
 610 00e6 FFF7FEFF 		bl	__aeabi_dmul
 611              	.LVL96:
 612 00ea 0646     		mov	r6, r0
 613              	.LVL97:
 614 00ec 0F46     		mov	r7, r1
 615 00ee DFF8DC80 		ldr	r8, .L15+20
 616              	.LVL98:
 617 00f2 D8E90001 		ldrd	r0, [r8]
 618 00f6 3246     		mov	r2, r6
 619 00f8 3B46     		mov	r3, r7
 620 00fa FFF7FEFF 		bl	__aeabi_dadd
 621              	.LVL99:
 622 00fe C8E90001 		strd	r0, [r8]
 157:Src/filter.c  ****     total_power[1] += x * x;
 623              		.loc 1 157 0
 624 0102 3046     		mov	r0, r6
 625 0104 3946     		mov	r1, r7
 626 0106 D8E90223 		ldrd	r2, [r8, #8]
 627 010a FFF7FEFF 		bl	__aeabi_dadd
 628              	.LVL100:
 629 010e C8E90201 		strd	r0, [r8, #8]
 158:Src/filter.c  ****     power = s_prev2[active] * s_prev2[active] + s_prev[active] * s_prev[active] - w_real * s_prev[a
 630              		.loc 1 158 0
 631 0112 E500     		lsls	r5, r4, #3
 632 0114 2E4B     		ldr	r3, .L15+24
 633 0116 2B44     		add	r3, r3, r5
 634 0118 D3E90067 		ldrd	r6, [r3]
 635 011c 3046     		mov	r0, r6
 636 011e 3946     		mov	r1, r7
 637 0120 3246     		mov	r2, r6
 638 0122 3B46     		mov	r3, r7
 639 0124 FFF7FEFF 		bl	__aeabi_dmul
 640              	.LVL101:
 641 0128 CDE90201 		strd	r0, [sp, #8]
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 15


 642 012c 244B     		ldr	r3, .L15+8
 643 012e 2B44     		add	r3, r3, r5
 644 0130 D3E900AB 		ldrd	r10, [r3]
 645 0134 5046     		mov	r0, r10
 646 0136 5946     		mov	r1, fp
 647 0138 5246     		mov	r2, r10
 648 013a 5B46     		mov	r3, fp
 649 013c FFF7FEFF 		bl	__aeabi_dmul
 650              	.LVL102:
 651 0140 0246     		mov	r2, r0
 652 0142 0B46     		mov	r3, r1
 653 0144 DDE90201 		ldrd	r0, [sp, #8]
 654 0148 FFF7FEFF 		bl	__aeabi_dadd
 655              	.LVL103:
 656 014c CDE90201 		strd	r0, [sp, #8]
 657 0150 DDE90001 		ldrd	r0, [sp]
 658 0154 5246     		mov	r2, r10
 659 0156 5B46     		mov	r3, fp
 660 0158 FFF7FEFF 		bl	__aeabi_dmul
 661              	.LVL104:
 662 015c 0246     		mov	r2, r0
 663 015e 0B46     		mov	r3, r1
 664 0160 3046     		mov	r0, r6
 665 0162 3946     		mov	r1, r7
 666 0164 FFF7FEFF 		bl	__aeabi_dmul
 667              	.LVL105:
 668 0168 0246     		mov	r2, r0
 669 016a 0B46     		mov	r3, r1
 670 016c DDE90201 		ldrd	r0, [sp, #8]
 671 0170 FFF7FEFF 		bl	__aeabi_dsub
 672              	.LVL106:
 673 0174 0646     		mov	r6, r0
 674 0176 0F46     		mov	r7, r1
 675              	.LVL107:
 159:Src/filter.c  **** 
 160:Src/filter.c  ****     // printf("\n\npoooower %f\n", power);
 161:Src/filter.c  ****     return power / (total_power[active] + 1e-7) / n[active];
 676              		.loc 1 161 0
 677 0178 4544     		add	r5, r5, r8
 678 017a D5E90001 		ldrd	r0, [r5]
 679 017e 0EA3     		adr	r3, .L15
 680 0180 D3E90023 		ldrd	r2, [r3]
 681 0184 FFF7FEFF 		bl	__aeabi_dadd
 682              	.LVL108:
 683 0188 0246     		mov	r2, r0
 684 018a 0B46     		mov	r3, r1
 685 018c 3046     		mov	r0, r6
 686 018e 3946     		mov	r1, r7
 687 0190 FFF7FEFF 		bl	__aeabi_ddiv
 688              	.LVL109:
 689 0194 0646     		mov	r6, r0
 690              	.LVL110:
 691 0196 0F46     		mov	r7, r1
 692 0198 0A4B     		ldr	r3, .L15+12
 693 019a 53F82400 		ldr	r0, [r3, r4, lsl #2]
 694 019e FFF7FEFF 		bl	__aeabi_i2d
 695              	.LVL111:
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 16


 696 01a2 0246     		mov	r2, r0
 697 01a4 0B46     		mov	r3, r1
 698 01a6 3046     		mov	r0, r6
 699 01a8 3946     		mov	r1, r7
 700 01aa FFF7FEFF 		bl	__aeabi_ddiv
 701              	.LVL112:
 162:Src/filter.c  **** }
 702              		.loc 1 162 0
 703 01ae 41EC100B 		fmdrr	d0, r0, r1
 704 01b2 05B0     		add	sp, sp, #20
 705              	.LCFI8:
 706              		.cfi_def_cfa_offset 36
 707              	.LVL113:
 708              		@ sp needed
 709 01b4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 710              	.LVL114:
 711              	.L16:
 712              		.align	3
 713              	.L15:
 714 01b8 48AFBC9A 		.word	2596056904
 715 01bc F2D77A3E 		.word	1048238066
 716 01c0 00000000 		.word	.LANCHOR6
 717 01c4 00000000 		.word	.LANCHOR8
 718 01c8 00000000 		.word	.LANCHOR9
 719 01cc 00000000 		.word	.LANCHOR10
 720 01d0 00000000 		.word	.LANCHOR7
 721 01d4 182D4454 		.word	1413754136
 722 01d8 FB211940 		.word	1075388923
 723              		.cfi_endproc
 724              	.LFE2:
 726              		.section	.bss.y.6062,"aw",%nobits
 727              		.align	3
 728              		.set	.LANCHOR4,. + 0
 731              	y.6062:
 732 0000 00000000 		.space	8
 732      00000000 
 733              		.section	.bss.d1.6060,"aw",%nobits
 734              		.align	3
 735              		.set	.LANCHOR2,. + 0
 738              	d1.6060:
 739 0000 00000000 		.space	8
 739      00000000 
 740              		.section	.bss.N.6074,"aw",%nobits
 741              		.align	2
 742              		.set	.LANCHOR9,. + 0
 745              	N.6074:
 746 0000 00000000 		.space	4
 747              		.section	.bss.s_prev.6071,"aw",%nobits
 748              		.align	3
 749              		.set	.LANCHOR6,. + 0
 752              	s_prev.6071:
 753 0000 00000000 		.space	16
 753      00000000 
 753      00000000 
 753      00000000 
 754              		.section	.bss.cbuf.6054,"aw",%nobits
 755              		.align	2
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 17


 756              		.set	.LANCHOR1,. + 0
 759              	cbuf.6054:
 760 0000 00000000 		.space	24
 760      00000000 
 760      00000000 
 760      00000000 
 760      00000000 
 761              		.section	.bss.initialized.6053,"aw",%nobits
 762              		.align	2
 763              		.set	.LANCHOR0,. + 0
 766              	initialized.6053:
 767 0000 00000000 		.space	4
 768              		.section	.bss.n.6080,"aw",%nobits
 769              		.align	2
 770              		.set	.LANCHOR8,. + 0
 773              	n.6080:
 774 0000 00000000 		.space	8
 774      00000000 
 775              		.section	.rodata.str1.4,"aMS",%progbits,1
 776              		.align	2
 777              	.LC0:
 778 0000 6E756D5F 		.ascii	"num_els: %lu, \000"
 778      656C733A 
 778      20256C75 
 778      2C2000
 779 000f 00       		.space	1
 780              	.LC1:
 781 0010 256600   		.ascii	"%f\000"
 782              		.section	.bss.total_power.6063,"aw",%nobits
 783              		.align	3
 784              		.set	.LANCHOR5,. + 0
 787              	total_power.6063:
 788 0000 00000000 		.space	8
 788      00000000 
 789              		.section	.bss.s_prev2.6072,"aw",%nobits
 790              		.align	3
 791              		.set	.LANCHOR7,. + 0
 794              	s_prev2.6072:
 795 0000 00000000 		.space	16
 795      00000000 
 795      00000000 
 795      00000000 
 796              		.section	.bss.d2.6061,"aw",%nobits
 797              		.align	3
 798              		.set	.LANCHOR3,. + 0
 801              	d2.6061:
 802 0000 00000000 		.space	8
 802      00000000 
 803              		.section	.bss.total_power.6073,"aw",%nobits
 804              		.align	3
 805              		.set	.LANCHOR10,. + 0
 808              	total_power.6073:
 809 0000 00000000 		.space	16
 809      00000000 
 809      00000000 
 809      00000000 
 810              		.text
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 18


 811              	.Letext0:
 812              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 813              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 814              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 815              		.file 5 "Inc/circular_buffer.h"
 816              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/stdio.h"
 817              		.file 7 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/math.h"
ARM GAS  /var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 filter.c
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:26     .text.goertzel:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:31     .text.goertzel:0000000000000000 goertzel
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:218    .text.goertzel:0000000000000128 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:225    .text.circular_goertzel_stream:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:230    .text.circular_goertzel_stream:0000000000000000 circular_goertzel_stream
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:456    .text.circular_goertzel_stream:0000000000000180 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:471    .text.tandem_goertzel_stream:0000000000000000 $t
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:476    .text.tandem_goertzel_stream:0000000000000000 tandem_goertzel_stream
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:714    .text.tandem_goertzel_stream:00000000000001b8 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:727    .bss.y.6062:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:731    .bss.y.6062:0000000000000000 y.6062
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:734    .bss.d1.6060:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:738    .bss.d1.6060:0000000000000000 d1.6060
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:741    .bss.N.6074:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:745    .bss.N.6074:0000000000000000 N.6074
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:748    .bss.s_prev.6071:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:752    .bss.s_prev.6071:0000000000000000 s_prev.6071
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:755    .bss.cbuf.6054:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:759    .bss.cbuf.6054:0000000000000000 cbuf.6054
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:762    .bss.initialized.6053:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:766    .bss.initialized.6053:0000000000000000 initialized.6053
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:769    .bss.n.6080:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:773    .bss.n.6080:0000000000000000 n.6080
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:776    .rodata.str1.4:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:783    .bss.total_power.6063:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:787    .bss.total_power.6063:0000000000000000 total_power.6063
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:790    .bss.s_prev2.6072:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:794    .bss.s_prev2.6072:0000000000000000 s_prev2.6072
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:797    .bss.d2.6061:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:801    .bss.d2.6061:0000000000000000 d2.6061
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:804    .bss.total_power.6073:0000000000000000 $d
/var/folders/ck/4xtm3skj1ssb0w4rn7_4q_gw0000gn/T//cceKlwDe.s:808    .bss.total_power.6073:0000000000000000 total_power.6073
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dadd
__aeabi_dsub
cos
circ_bufsum_init
printf
circ_bufsum_add_sample
